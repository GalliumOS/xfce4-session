/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_xfce_Session_Client
#define DBUS_GLIB_CLIENT_WRAPPERS_org_xfce_Session_Client

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_client_dbus_client_get_id (DBusGProxy *proxy, char ** OUT_id, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetID", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_id, G_TYPE_INVALID);
}

typedef void (*xfsm_client_dbus_client_get_id_reply) (DBusGProxy *proxy, char * OUT_id, GError *error, gpointer userdata);

static void
xfsm_client_dbus_client_get_id_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_id;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_id, G_TYPE_INVALID);
  (*(xfsm_client_dbus_client_get_id_reply)data->cb) (proxy, OUT_id, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_client_dbus_client_get_id_async (DBusGProxy *proxy, xfsm_client_dbus_client_get_id_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetID", xfsm_client_dbus_client_get_id_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_client_dbus_client_get_state (DBusGProxy *proxy, guint* OUT_state, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetState", error, G_TYPE_INVALID, G_TYPE_UINT, OUT_state, G_TYPE_INVALID);
}

typedef void (*xfsm_client_dbus_client_get_state_reply) (DBusGProxy *proxy, guint OUT_state, GError *error, gpointer userdata);

static void
xfsm_client_dbus_client_get_state_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  guint OUT_state;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_UINT, &OUT_state, G_TYPE_INVALID);
  (*(xfsm_client_dbus_client_get_state_reply)data->cb) (proxy, OUT_state, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_client_dbus_client_get_state_async (DBusGProxy *proxy, xfsm_client_dbus_client_get_state_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetState", xfsm_client_dbus_client_get_state_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_client_dbus_client_get_all_sm_properties (DBusGProxy *proxy, GHashTable** OUT_properties, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetAllSmProperties", error, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), OUT_properties, G_TYPE_INVALID);
}

typedef void (*xfsm_client_dbus_client_get_all_sm_properties_reply) (DBusGProxy *proxy, GHashTable *OUT_properties, GError *error, gpointer userdata);

static void
xfsm_client_dbus_client_get_all_sm_properties_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_properties;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &OUT_properties, G_TYPE_INVALID);
  (*(xfsm_client_dbus_client_get_all_sm_properties_reply)data->cb) (proxy, OUT_properties, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_client_dbus_client_get_all_sm_properties_async (DBusGProxy *proxy, xfsm_client_dbus_client_get_all_sm_properties_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetAllSmProperties", xfsm_client_dbus_client_get_all_sm_properties_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_client_dbus_client_get_sm_properties (DBusGProxy *proxy, const char ** IN_names, GHashTable** OUT_values, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetSmProperties", error, G_TYPE_STRV, IN_names, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), OUT_values, G_TYPE_INVALID);
}

typedef void (*xfsm_client_dbus_client_get_sm_properties_reply) (DBusGProxy *proxy, GHashTable *OUT_values, GError *error, gpointer userdata);

static void
xfsm_client_dbus_client_get_sm_properties_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_values;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &OUT_values, G_TYPE_INVALID);
  (*(xfsm_client_dbus_client_get_sm_properties_reply)data->cb) (proxy, OUT_values, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_client_dbus_client_get_sm_properties_async (DBusGProxy *proxy, const char ** IN_names, xfsm_client_dbus_client_get_sm_properties_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetSmProperties", xfsm_client_dbus_client_get_sm_properties_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRV, IN_names, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_client_dbus_client_set_sm_properties (DBusGProxy *proxy, const GHashTable* IN_properties, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetSmProperties", error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_properties, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*xfsm_client_dbus_client_set_sm_properties_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
xfsm_client_dbus_client_set_sm_properties_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(xfsm_client_dbus_client_set_sm_properties_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_client_dbus_client_set_sm_properties_async (DBusGProxy *proxy, const GHashTable* IN_properties, xfsm_client_dbus_client_set_sm_properties_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetSmProperties", xfsm_client_dbus_client_set_sm_properties_async_callback, stuff, _dbus_glib_async_data_free, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_properties, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_client_dbus_client_delete_sm_properties (DBusGProxy *proxy, const char ** IN_names, GError **error)

{
  return dbus_g_proxy_call (proxy, "DeleteSmProperties", error, G_TYPE_STRV, IN_names, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*xfsm_client_dbus_client_delete_sm_properties_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
xfsm_client_dbus_client_delete_sm_properties_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(xfsm_client_dbus_client_delete_sm_properties_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_client_dbus_client_delete_sm_properties_async (DBusGProxy *proxy, const char ** IN_names, xfsm_client_dbus_client_delete_sm_properties_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "DeleteSmProperties", xfsm_client_dbus_client_delete_sm_properties_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRV, IN_names, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_client_dbus_client_terminate (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Terminate", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*xfsm_client_dbus_client_terminate_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
xfsm_client_dbus_client_terminate_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(xfsm_client_dbus_client_terminate_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_client_dbus_client_terminate_async (DBusGProxy *proxy, xfsm_client_dbus_client_terminate_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Terminate", xfsm_client_dbus_client_terminate_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_xfce_Session_Client */

G_END_DECLS
