/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_xfce_Session_Manager
#define DBUS_GLIB_CLIENT_WRAPPERS_org_xfce_Session_Manager

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_manager_dbus_client_get_info (DBusGProxy *proxy, char ** OUT_name, char ** OUT_version, char ** OUT_vendor, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetInfo", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_name, G_TYPE_STRING, OUT_version, G_TYPE_STRING, OUT_vendor, G_TYPE_INVALID);
}

typedef void (*xfsm_manager_dbus_client_get_info_reply) (DBusGProxy *proxy, char * OUT_name, char * OUT_version, char * OUT_vendor, GError *error, gpointer userdata);

static void
xfsm_manager_dbus_client_get_info_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_name;
  char * OUT_version;
  char * OUT_vendor;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_name, G_TYPE_STRING, &OUT_version, G_TYPE_STRING, &OUT_vendor, G_TYPE_INVALID);
  (*(xfsm_manager_dbus_client_get_info_reply)data->cb) (proxy, OUT_name, OUT_version, OUT_vendor, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_manager_dbus_client_get_info_async (DBusGProxy *proxy, xfsm_manager_dbus_client_get_info_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetInfo", xfsm_manager_dbus_client_get_info_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_manager_dbus_client_list_clients (DBusGProxy *proxy, GPtrArray** OUT_clients, GError **error)

{
  return dbus_g_proxy_call (proxy, "ListClients", error, G_TYPE_INVALID, dbus_g_type_get_collection ("GPtrArray", DBUS_TYPE_G_OBJECT_PATH), OUT_clients, G_TYPE_INVALID);
}

typedef void (*xfsm_manager_dbus_client_list_clients_reply) (DBusGProxy *proxy, GPtrArray *OUT_clients, GError *error, gpointer userdata);

static void
xfsm_manager_dbus_client_list_clients_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GPtrArray* OUT_clients;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GPtrArray", DBUS_TYPE_G_OBJECT_PATH), &OUT_clients, G_TYPE_INVALID);
  (*(xfsm_manager_dbus_client_list_clients_reply)data->cb) (proxy, OUT_clients, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_manager_dbus_client_list_clients_async (DBusGProxy *proxy, xfsm_manager_dbus_client_list_clients_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "ListClients", xfsm_manager_dbus_client_list_clients_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_manager_dbus_client_get_state (DBusGProxy *proxy, guint* OUT_state, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetState", error, G_TYPE_INVALID, G_TYPE_UINT, OUT_state, G_TYPE_INVALID);
}

typedef void (*xfsm_manager_dbus_client_get_state_reply) (DBusGProxy *proxy, guint OUT_state, GError *error, gpointer userdata);

static void
xfsm_manager_dbus_client_get_state_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  guint OUT_state;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_UINT, &OUT_state, G_TYPE_INVALID);
  (*(xfsm_manager_dbus_client_get_state_reply)data->cb) (proxy, OUT_state, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_manager_dbus_client_get_state_async (DBusGProxy *proxy, xfsm_manager_dbus_client_get_state_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetState", xfsm_manager_dbus_client_get_state_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_manager_dbus_client_checkpoint (DBusGProxy *proxy, const char * IN_session_name, GError **error)

{
  return dbus_g_proxy_call (proxy, "Checkpoint", error, G_TYPE_STRING, IN_session_name, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*xfsm_manager_dbus_client_checkpoint_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
xfsm_manager_dbus_client_checkpoint_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(xfsm_manager_dbus_client_checkpoint_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_manager_dbus_client_checkpoint_async (DBusGProxy *proxy, const char * IN_session_name, xfsm_manager_dbus_client_checkpoint_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Checkpoint", xfsm_manager_dbus_client_checkpoint_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_session_name, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_manager_dbus_client_logout (DBusGProxy *proxy, const gboolean IN_show_dialog, const gboolean IN_allow_save, GError **error)

{
  return dbus_g_proxy_call (proxy, "Logout", error, G_TYPE_BOOLEAN, IN_show_dialog, G_TYPE_BOOLEAN, IN_allow_save, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*xfsm_manager_dbus_client_logout_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
xfsm_manager_dbus_client_logout_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(xfsm_manager_dbus_client_logout_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_manager_dbus_client_logout_async (DBusGProxy *proxy, const gboolean IN_show_dialog, const gboolean IN_allow_save, xfsm_manager_dbus_client_logout_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Logout", xfsm_manager_dbus_client_logout_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_BOOLEAN, IN_show_dialog, G_TYPE_BOOLEAN, IN_allow_save, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_manager_dbus_client_shutdown (DBusGProxy *proxy, const gboolean IN_allow_save, GError **error)

{
  return dbus_g_proxy_call (proxy, "Shutdown", error, G_TYPE_BOOLEAN, IN_allow_save, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*xfsm_manager_dbus_client_shutdown_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
xfsm_manager_dbus_client_shutdown_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(xfsm_manager_dbus_client_shutdown_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_manager_dbus_client_shutdown_async (DBusGProxy *proxy, const gboolean IN_allow_save, xfsm_manager_dbus_client_shutdown_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Shutdown", xfsm_manager_dbus_client_shutdown_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_BOOLEAN, IN_allow_save, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_manager_dbus_client_can_shutdown (DBusGProxy *proxy, gboolean* OUT_can_shutdown, GError **error)

{
  return dbus_g_proxy_call (proxy, "CanShutdown", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_can_shutdown, G_TYPE_INVALID);
}

typedef void (*xfsm_manager_dbus_client_can_shutdown_reply) (DBusGProxy *proxy, gboolean OUT_can_shutdown, GError *error, gpointer userdata);

static void
xfsm_manager_dbus_client_can_shutdown_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_can_shutdown;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_can_shutdown, G_TYPE_INVALID);
  (*(xfsm_manager_dbus_client_can_shutdown_reply)data->cb) (proxy, OUT_can_shutdown, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_manager_dbus_client_can_shutdown_async (DBusGProxy *proxy, xfsm_manager_dbus_client_can_shutdown_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "CanShutdown", xfsm_manager_dbus_client_can_shutdown_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_manager_dbus_client_restart (DBusGProxy *proxy, const gboolean IN_allow_save, GError **error)

{
  return dbus_g_proxy_call (proxy, "Restart", error, G_TYPE_BOOLEAN, IN_allow_save, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*xfsm_manager_dbus_client_restart_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
xfsm_manager_dbus_client_restart_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(xfsm_manager_dbus_client_restart_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_manager_dbus_client_restart_async (DBusGProxy *proxy, const gboolean IN_allow_save, xfsm_manager_dbus_client_restart_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Restart", xfsm_manager_dbus_client_restart_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_BOOLEAN, IN_allow_save, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_manager_dbus_client_can_restart (DBusGProxy *proxy, gboolean* OUT_can_restart, GError **error)

{
  return dbus_g_proxy_call (proxy, "CanRestart", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_can_restart, G_TYPE_INVALID);
}

typedef void (*xfsm_manager_dbus_client_can_restart_reply) (DBusGProxy *proxy, gboolean OUT_can_restart, GError *error, gpointer userdata);

static void
xfsm_manager_dbus_client_can_restart_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_can_restart;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_can_restart, G_TYPE_INVALID);
  (*(xfsm_manager_dbus_client_can_restart_reply)data->cb) (proxy, OUT_can_restart, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_manager_dbus_client_can_restart_async (DBusGProxy *proxy, xfsm_manager_dbus_client_can_restart_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "CanRestart", xfsm_manager_dbus_client_can_restart_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_manager_dbus_client_suspend (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Suspend", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*xfsm_manager_dbus_client_suspend_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
xfsm_manager_dbus_client_suspend_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(xfsm_manager_dbus_client_suspend_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_manager_dbus_client_suspend_async (DBusGProxy *proxy, xfsm_manager_dbus_client_suspend_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Suspend", xfsm_manager_dbus_client_suspend_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_manager_dbus_client_can_suspend (DBusGProxy *proxy, gboolean* OUT_can_suspend, GError **error)

{
  return dbus_g_proxy_call (proxy, "CanSuspend", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_can_suspend, G_TYPE_INVALID);
}

typedef void (*xfsm_manager_dbus_client_can_suspend_reply) (DBusGProxy *proxy, gboolean OUT_can_suspend, GError *error, gpointer userdata);

static void
xfsm_manager_dbus_client_can_suspend_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_can_suspend;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_can_suspend, G_TYPE_INVALID);
  (*(xfsm_manager_dbus_client_can_suspend_reply)data->cb) (proxy, OUT_can_suspend, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_manager_dbus_client_can_suspend_async (DBusGProxy *proxy, xfsm_manager_dbus_client_can_suspend_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "CanSuspend", xfsm_manager_dbus_client_can_suspend_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_manager_dbus_client_hibernate (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Hibernate", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*xfsm_manager_dbus_client_hibernate_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
xfsm_manager_dbus_client_hibernate_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(xfsm_manager_dbus_client_hibernate_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_manager_dbus_client_hibernate_async (DBusGProxy *proxy, xfsm_manager_dbus_client_hibernate_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Hibernate", xfsm_manager_dbus_client_hibernate_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfsm_manager_dbus_client_can_hibernate (DBusGProxy *proxy, gboolean* OUT_can_hibernate, GError **error)

{
  return dbus_g_proxy_call (proxy, "CanHibernate", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_can_hibernate, G_TYPE_INVALID);
}

typedef void (*xfsm_manager_dbus_client_can_hibernate_reply) (DBusGProxy *proxy, gboolean OUT_can_hibernate, GError *error, gpointer userdata);

static void
xfsm_manager_dbus_client_can_hibernate_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_can_hibernate;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_can_hibernate, G_TYPE_INVALID);
  (*(xfsm_manager_dbus_client_can_hibernate_reply)data->cb) (proxy, OUT_can_hibernate, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfsm_manager_dbus_client_can_hibernate_async (DBusGProxy *proxy, xfsm_manager_dbus_client_can_hibernate_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "CanHibernate", xfsm_manager_dbus_client_can_hibernate_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_xfce_Session_Manager */

G_END_DECLS
