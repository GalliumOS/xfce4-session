<?xml version="1.0" encoding="UTF-8"?>

<!--
     TODO:

     * define errors and list what methods can throw which errors
     * be sure the states in both GetState() methods make sense,
       and see if there are others that should be included
     * should we include the SM client ID string in the ClientRegistered
       and/or ClientDisconnected() signals?
     * include a "ShutdownStarted" signal?
     * extra shutdown type for "safe suspend" aka "s2both"?
-->

<node name="/org/xfce/SessionManager">
    <interface name="org.xfce.Session.Manager">
        <annotation name="org.freedesktop.DBus.GLib.CSymbol"
                    value="xfsm_manager_dbus"/>
        <annotation name="org.freedesktop.DBus.GLib.ClientCSymbol"
                    value="xfsm_manager_dbus_client"/>

        <!--
             (String, String, String) org.xfce.Session.Manager.GetInfo()

             Returns:

             @name: The session manager's name.
             @version: The session manager's version.
             @vendor: The vendor releasing the session manager.
        -->
        <method name="GetInfo">
            <arg direction="out" name="name" type="s"/>
            <arg direction="out" name="version" type="s"/>
            <arg direction="out" name="vendor" type="s"/>
        </method>

        <!--
             ObjectPath[] org.xfce.Session.Manager.ListClients()

             Retrieves a list of session clients from the session
             manager, as a list of D-Bus object paths.  These
             object paths all support the org.xfce.Session.Client
             interface.
        -->
        <method name="ListClients">
            <arg direction="out" name="clients" type="ao"/>
        </method>

        <!--
             Unsigned Int org.xfce.Session.Manager.GetState()

             Queries the session manager for its current operating
             state.  Valid values are:
                 0  Startup: the session manager is starting up and
                    restoring clients from the previous session.
                 1  Idle: the session manager has started up and is
                    waiting for client events.
                 2  Checkpoint: the session manager is saving the
                    client list and instructing clients to save state.
                 3  Shutdown: the session manager is shutting down.
                 4  Shutdown Phase 2: the session manager is shutting
                    down and is allowing clients which have requested
                    extra time to save their state to do so.
        -->
        <method name="GetState">
            <arg direction="out" name="state" type="u"/>
        </method>

        <!--
             void org.Xfce.Session.Manager.Checkpoint(String session_name)

             @session_name: The name of the session to save.  Pass the
                            empty string ("") to use the name of the
                            currently-running session.

             Instructs the session manager to save state and save all
             client state, without ending the session.
        -->
        <method name="Checkpoint">
            <arg direction="in" name="session_name" type="s"/>
        </method>

        <!--
             void org.Xfce.Session.Manager.Logout
        -->
        <method name="Logout">
            <arg direction="in" name="show_dialog" type="b"/>
            <arg direction="in" name="allow_save" type="b"/>
        </method>

        <!--
             void org.Xfce.Session.Manager.Shutdown
        -->
        <method name="Shutdown">
            <arg direction="in" name="allow_save" type="b"/>
        </method>

        <!--
             void org.Xfce.Session.Manager.CanShutdown
        -->
        <method name="CanShutdown">
            <arg direction="out" name="can_shutdown" type="b"/>
        </method>

        <!--
             void org.Xfce.Session.Manager.Restart
        -->
        <method name="Restart">
            <arg direction="in" name="allow_save" type="b"/>
        </method>

        <!--
             void org.Xfce.Session.Manager.CanRestart
        -->
        <method name="CanRestart">
            <arg direction="out" name="can_restart" type="b"/>
        </method>

        <!--
             void org.Xfce.Session.Manager.Suspend

             This will possibly be removed in the future
        -->
        <method name="Suspend" />

        <!--
             void org.Xfce.Session.Manager.CanSuspend

             This will possibly be removed in the future
        -->
        <method name="CanSuspend">
            <arg direction="out" name="can_suspend" type="b"/>
        </method>

        <!--
             void org.Xfce.Session.Manager.Hibernate

             This will possibly be removed in the future
        -->
        <method name="Hibernate" />

        <!--
             void org.Xfce.Session.Manager.CanHibernate

             This will possibly be removed in the future
        -->
        <method name="CanHibernate">
            <arg direction="out" name="can_hibernate" type="b"/>
        </method>

        <!--
             void org.xfce.Session.Manager.StateChanged(Unsigned Int old_state,
                                                        Unsigned Int new_state)

             @old_state: The SM's previous state.
             @new_state: The SM's new (current) state.

             Emitted when the session manager's state changes.
             See GetState() above for valid values for the
             arguments.
        -->
        <signal name="StateChanged">
            <arg name="old_state" type="u"/>
            <arg name="new_state" type="u"/>
        </signal>

        <!--
             void org.xfce.Session.Manager.ClientRegistered(ObjectPath client)

             @client: A D-Bus object path.

             Emitted when a new client is registered.
        -->
        <signal name="ClientRegistered">
            <arg name="client" type="o"/>
        </signal>

        <!--
             void org.xfce.Session.Manager.ShutdownCancelled()

             Emitted when a previously-started shutdown has been
             cancelled.
        -->
        <signal name="ShutdownCancelled"/>
    </interface>
</node>
